import heapq
import copy

class PuzzleState:
    def __init__(self, puzzle, blank_row, blank_col, cost, heuristic):
        self.puzzle = puzzle
        self.blank_row = blank_row
        self.blank_col = blank_col
        self.cost = cost
        self.heuristic = heuristic

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

def print_puzzle(state):
    for row in state.puzzle:
        print(row)
    print()

def is_goal_state(state):
    return state.puzzle == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

def is_valid_move(row, col):
    return 0 <= row < 3 and 0 <= col < 3

def make_move(src, dest_row, dest_col):
    new_state = copy.deepcopy(src)
    new_state.puzzle[src.blank_row][src.blank_col] = src.puzzle[dest_row][dest_col]
    new_state.puzzle[dest_row][dest_col] = 0
    new_state.blank_row = dest_row
    new_state.blank_col = dest_col
    return new_state

def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state.puzzle[i][j]
            if value != 0:
                goal_row, goal_col = (value - 1) // 3, (value - 1) % 3
                distance += abs(i - goal_row) + abs(j - goal_col)
    return distance

def solve_puzzle(initial_state):
    open_list = []
    closed_set = set()

    heapq.heappush(open_list, initial_state)

    while open_list:
        current_state = heapq.heappop(open_list)

        if is_goal_state(current_state):
            print("Solution found!")
            print_puzzle(current_state)
            return

        closed_set.add(tuple(map(tuple, current_state.puzzle)))

        moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        for move in moves:
            dest_row, dest_col = current_state.blank_row + move[0], current_state.blank_col + move[1]

            if is_valid_move(dest_row, dest_col):
                next_state = make_move(current_state, dest_row, dest_col)

                if tuple(map(tuple, next_state.puzzle)) not in closed_set:
                    next_state.cost = current_state.cost + 1
                    next_state.heuristic = manhattan_distance(next_state)
                    heapq.heappush(open_list, next_state)

    print("No solution found.")

if __name__ == "__main__":
    initial_state = PuzzleState([[1, 2, 3], [4, 0, 5], [6, 7, 8]], 1, 1, 0, 0)

    print("Initial Puzzle State:")
    print_puzzle(initial_state)

    solve_puzzle(initial_state)
