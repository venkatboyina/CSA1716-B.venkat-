import heapq
class PuzzleNode:
    def _init_(self, state, parent=None, move=None):
        self.state = state
        self.parent = parent
        self.move = move
        self.cost = 0 if parent is None else parent.cost + 1

    def _lt_(self, other):
        return (self.cost + self.heuristic()) < (other.cost + other.heuristic())

    def _eq_(self, other):
        return self.state == other.state

    def _hash_(self):
        return hash(str(self.state))

    def heuristic(self):
        # Manhattan distance heuristic
        total_distance = 0
        goal_state = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
        for i in range(3):
            for j in range(3):
                if self.state[i][j] != 0:
                    x_goal, y_goal = divmod(self.state[i][j], 3)
                    total_distance += abs(x_goal - i) + abs(y_goal - j)
        return total_distance

    def get_neighbors(self):
        neighbors = []
        x, y = self.get_blank_position()
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                new_state = [row[:] for row in self.state]
                new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
                neighbors.append(PuzzleNode(new_state, self, (new_x, new_y)))
        return neighbors

    def get_blank_position(self):
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    return i, j

def solve_8_puzzle(initial_state):
    initial_node = PuzzleNode(initial_state)
    if is_solvable(initial_state):
        frontier = [initial_node]
        visited = set()
        while frontier:
            current_node = heapq.heappop(frontier)
            visited.add(current_node)
            if current_node.state == [[0, 1, 2], [3, 4, 5], [6, 7, 8]]:
                return reconstruct_path(current_node)
            for neighbor in current_node.get_neighbors():
                if neighbor not in visited:
                    heapq.heappush(frontier, neighbor)
    else:
        return "Unsolvable puzzle"

def is_solvable(state):
    inversions = 0
    flat_state = [num for row in state for num in row if num != 0]
    for i in range(len(flat_state)):
        for j in range(i+1, len(flat_state)):
            if flat_state[i] > flat_state[j]:
                inversions += 1
    return inversions % 2 == 0

def reconstruct_path(node):
    path = []
    while node is not None:
        path.append(node.state)
        node = node.parent
    return path[::-1]

def print_solution(solution):
    for i, state in enumerate(solution):
        print(f"Step {i}:")
        for row in state:
            print(row)
        print()

if _name_ == "_main_":
    initial_state = [[1, 2, 3], [0, 4, 5], [6, 7, 8]]  # Example initial state
    solution = solve_8_puzzle(initial_state)
    if solution != "Unsolvable puzzle":
        print_solution(solution)
    else:
        print(solution)


